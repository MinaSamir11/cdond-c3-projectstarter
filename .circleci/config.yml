version: 2.1

orbs:
  slack: circleci/slack@4.9.3
commands:
  notify-on-failure:
    steps:
      - slack/notify:
          event: fail
          channel: test-cicd
          template: basic_fail_1

  install-aws:
    steps:
      - checkout
      - run:
          name: Setup AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install-ansible:
    steps:
      - run:
          name: Setup ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-nodejs:
    description: Install nodejs 16
    steps:
      - run:
          name: Setup Node
          command: |
            curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:8}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
              --stack-name backend-fwd-p3-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<< parameters.Workflow_ID >> --recursive
            aws cloudformation delete-stack \
              --stack-name frontend-fwd-p3-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:8}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migrations_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 ));
            then
             cd ~/project/backend
             npm install --legacy-peer-deps
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-node-modules]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-node-modules
      - notify-on-failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-node-modules]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i 
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-node-modules
      - notify-on-failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-node-modules]
      - run:
          name: unit-test front-end
          command: |
            cd frontend
            npm i 
            npm run test
      - notify-on-failure

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-node-modules]
      - run:
          name: unit-test backend-end
          command: |
            cd backend
            npm i 
            npm run test
      - notify-on-failure

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-node-modules]
      - run:
          name: scan-vulnerabilities front-end
          command: |
            cd frontend
            npm i 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify-on-failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-node-modules]
      - run:
          name: scan-vulnerabilities backend-end
          command: |
            cd backend
            npm i 
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - notify-on-failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=fwd-udacity-p3 \
               --stack-name "backend-fwd-p3-${CIRCLE_WORKFLOW_ID:0:8}" \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
      - notify-on-failure
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=fwd-udacity-p3 \
               --stack-name "frontend-fwd-p3-${CIRCLE_WORKFLOW_ID:0:8}" \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:8}
      - notify-on-failure
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text) 
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - notify-on-failure
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    description: Setup infrastructure on backend server
    steps:
      - checkout
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["bf:73:6d:49:d2:0a:78:fe:5e:48:5e:70:14:62:15:fa"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - install-aws
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i 
            npm run build
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
              curl --insecure -d '1' "https://kvdb.io/${KVDB_BUCKET}/migrations_${CIRCLE_WORKFLOW_ID:0:8}" 
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs
      - restore_cache:
          keys: [frontend-node-modules]

      - run:
          name: Get server backend ip and setup backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text) 
             
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat  frontend/.env

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            echo ${API_URL}
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:8} --recursive

      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-ansible
      - install-nodejs
      - add_ssh_keys:
          fingerprints: ["bf:73:6d:49:d2:0a:78:fe:5e:48:5e:70:14:62:15:fa"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-node-modules]
      - run:
          name: Install Backend dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build backend project
          command: |
            cd backend
            npm run build
      - run:
          name: Archiving & Packaging Backend Build Folder
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files

      - run:
          name: Deploying backend to instance with ansible, rename values env
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws
      - install-nodejs

      - run:
          name: Get backend url & Backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:8}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export BASE_URL=http://${BACKEND_PUBLIC_IP}:3030 
            if curl -s $BASE_URL/api/status | grep "ok"
            then 
              exit 0
            else
              exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:8}.s3-website-${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_URL | grep "Welcome"
            then 
              exit 0
            else 
              exit 1
            fi
      # - destroy-environment
      # - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - install-aws
      - checkout
      - install-nodejs
      - run:
          name: Save Old Deployment workflow id to kvdb.io
          command: |
            export OLD_DEPLOYMENT_ID=$(aws cloudformation \
                   list-exports --query "Export[?Name==\`WorkflowID\`].Value" \
                   --no-paginate --output text)
            echo "Old Deployment/workflow Id: $OLD_DEPLOYMENT_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_deployment_id -d "${OLD_DEPLOYMENT_ID}"

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --parameters-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:8}" \
            --stack-name InitialStack

      - destroy-environment
      - revert-migrations

  # cleanup:
  #   docker:
  #     # Docker image here
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # your code here
  #           export OldWorkflowID="the id here"
  #           export STACKS=[] #put the list of stacks here
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #             # your code here
  #           fi
  notify_on_success:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          event: pass
          channel: test-cicd
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend]
          filters:
            branches:
              only: [master]

      - configure-infrastructure:
          requires: [deploy-infrastructure]

      - run-migrations:
          requires: [configure-infrastructure]

      - deploy-frontend:
          requires: [run-migrations]

      - notify_on_success:
          requires: [
              # test-frontend,
              # test-backend,
              # build-front,
              # build-backend,
              deploy-infrastructure,
              configure-infrastructure,
              run-migrations,
              deploy-frontend,
              deploy-backend,
            ]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
